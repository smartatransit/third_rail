definitions:
  controllers.AlertResponse:
    properties:
      data:
        $ref: '#/definitions/marta_schemas.Alerts'
    type: object
  controllers.DirectionsResponse:
    properties:
      data:
        $ref: '#/definitions/controllers.directionsData'
    type: object
  controllers.LinesResponse:
    properties:
      data:
        $ref: '#/definitions/controllers.linesData'
    type: object
  controllers.ParkingResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/controllers.parkingData'
        type: array
    type: object
  controllers.Response:
    properties:
      data:
        items:
          $ref: '#/definitions/controllers.responseData'
        type: array
    type: object
  controllers.StationsLocationResponse:
    properties:
      data:
        items:
          $ref: '#/definitions/models.Station'
        type: array
    type: object
  controllers.StationsResponse:
    properties:
      data:
        $ref: '#/definitions/controllers.stationsData'
    type: object
  controllers.directionsData:
    properties:
      directions:
        items:
          $ref: '#/definitions/models.Direction'
        type: array
    type: object
  controllers.linesData:
    properties:
      lines:
        items:
          $ref: '#/definitions/models.Line'
        type: array
    type: object
  controllers.parkingData:
    properties:
      station:
        $ref: '#/definitions/marta_schemas.Station'
      status:
        type: string
    type: object
  controllers.responseData:
    properties:
      schedule:
        $ref: '#/definitions/marta_schemas.Schedule'
      station:
        $ref: '#/definitions/marta_schemas.Station'
    type: object
  controllers.stationsData:
    properties:
      stations:
        items:
          $ref: '#/definitions/models.Station'
        type: array
    type: object
  marta_schemas.Alerts:
    properties:
      Bus:
        items:
          $ref: '#/definitions/marta_schemas.BusAlert'
        type: array
      Rail:
        items:
          $ref: '#/definitions/marta_schemas.RailAlert'
        type: array
      text:
        type: string
    type: object
  marta_schemas.BusAlert:
    properties:
      desc:
        type: string
      expires:
        type: string
      id:
        type: string
      text:
        type: string
      title:
        type: string
    type: object
  marta_schemas.RailAlert:
    properties:
      desc:
        type: string
      expires:
        type: string
      id:
        type: string
      text:
        type: string
      title:
        type: string
    type: object
  marta_schemas.Schedule:
    properties:
      destination:
        type: string
      event_time:
        type: string
      next_arrival:
        type: string
      next_station:
        type: string
      train_id:
        type: string
      waiting_seconds:
        type: string
      waiting_time:
        type: string
    type: object
  marta_schemas.Station:
    properties:
      direction:
        type: string
      line:
        type: string
      name:
        type: string
    type: object
  models.Alias:
    properties:
      alias:
        type: string
      description:
        type: string
      namedElementType:
        type: string
    type: object
  models.Direction:
    properties:
      aliases:
        items:
          $ref: '#/definitions/models.Alias'
        type: array
      feedback:
        items:
          $ref: '#/definitions/models.Feedback'
        type: array
      lines:
        items:
          $ref: '#/definitions/models.Line'
        type: array
      name:
        type: string
    type: object
  models.Feedback:
    properties:
      createdAt:
        type: string
      deletedAt:
        type: string
      description:
        type: string
      directionID:
        type: integer
      expiresAt:
        type: string
      id:
        type: integer
      lineID:
        type: integer
      source:
        $ref: '#/definitions/models.FeedbackSource'
      sourceID:
        type: integer
      stationID:
        type: integer
      thumbsDown:
        type: integer
      thumbsUp:
        type: integer
      type:
        $ref: '#/definitions/models.FeedbackType'
      typeID:
        type: integer
      updatedAt:
        type: string
    type: object
  models.FeedbackSource:
    properties:
      createdAt:
        type: string
      deletedAt:
        type: string
      id:
        type: integer
      sourceID:
        type: string
      sourceType:
        type: string
      updatedAt:
        type: string
    type: object
  models.FeedbackType:
    properties:
      createdAt:
        type: string
      deletedAt:
        type: string
      description:
        type: string
      id:
        type: integer
      updatedAt:
        type: string
    type: object
  models.Line:
    properties:
      aliases:
        items:
          $ref: '#/definitions/models.Alias'
        type: array
      directions:
        items:
          $ref: '#/definitions/models.Direction'
        type: array
      feedback:
        items:
          $ref: '#/definitions/models.Feedback'
        type: array
      name:
        type: string
      stations:
        items:
          $ref: '#/definitions/models.Station'
        type: array
    type: object
  models.Station:
    properties:
      aliases:
        items:
          $ref: '#/definitions/models.Alias'
        type: array
      detail:
        $ref: '#/definitions/models.StationDetail'
      feedback:
        items:
          $ref: '#/definitions/models.Feedback'
        type: array
      id:
        type: integer
      lines:
        items:
          $ref: '#/definitions/models.Line'
        type: array
      name:
        type: string
    type: object
  models.StationDetail:
    properties:
      description:
        type: string
      distance:
        type: number
      location:
        type: string
    type: object
info:
  contact:
    email: smartatransit@gmail.com
    name: SMARTA Support
  description: API to serve you SMARTA data
  license:
    name: GNU General Public License v3.0
    url: https://github.com/smartatransit/third_rail/blob/master/LICENSE
  title: SMARTA API
  version: "1.0"
paths:
  /live/alerts:
    get:
      description: MARTA alerts sourced from their official twitter account
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.AlertResponse'
      security:
      - ApiKeyAuth: []
      summary: Get Alerts from various MARTA sources
  /live/schedule/line/{line}:
    get:
      description: Given a line, return the current live schedule
      parameters:
      - description: RED, GOLD, BLUE, GREEN
        in: path
        name: line
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.Response'
      security:
      - ApiKeyAuth: []
      summary: Get Schedule By Line
  /live/schedule/station/{station}:
    get:
      description: Given a station, return the current live schedule
      parameters:
      - description: 'TODO: Enter all stations as enum?'
        in: path
        name: station
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.Response'
      security:
      - ApiKeyAuth: []
      summary: Get Schedule By Station
  /smart/parking:
    get:
      description: Get available parking information as informed by twitter
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.ParkingResponse'
      security:
      - ApiKeyAuth: []
      summary: Get Parking Information
  /smart/station/{id}:
    get:
      description: Given a station ID, return the latest estimates for trains
      parameters:
      - description: Unique id of the station
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.Response'
      security:
      - ApiKeyAuth: []
      summary: Get Schedule By Station
  /static/directions:
    get:
      description: Get all available directions
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.DirectionsResponse'
      security:
      - ApiKeyAuth: []
      summary: Get Directions
  /static/lines:
    get:
      description: Get all available lines
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.LinesResponse'
      security:
      - ApiKeyAuth: []
      summary: Get Lines
  /static/schedule/station:
    get:
      description: Get MARTA's scheduled times for arrival for all stations
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.Response'
      security:
      - ApiKeyAuth: []
      summary: Get Static Schedule By Station
  /static/stations:
    get:
      description: Get all available stations
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.StationsResponse'
      security:
      - ApiKeyAuth: []
      summary: Get Stations
  /static/stations/location:
    get:
      description: Get a list of MARTA rail station sorted in descending order of distance from a given point. Specify the longitude and latitude as decimal numbers of degrees, such as "-45.354322" or "86.912341"
      parameters:
      - description: Latitude
        in: query
        name: latitude
        required: true
        type: number
      - description: Longitude
        in: query
        name: longitude
        required: true
        type: number
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controllers.StationsLocationResponse'
        "400":
          description: ""
      security:
      - ApiKeyAuth: []
      summary: Find the nearest rail stations
securityDefinitions:
  ApiKeyAuth:
    authorizationUrl: ""
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
