// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "SMARTA Support",
            "email": "smartatransit@gmail.com"
        },
        "license": {
            "name": "GNU General Public License v3.0",
            "url": "https://github.com/smartatransit/third_rail/blob/master/LICENSE"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/live/alerts": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "MARTA alerts sourced from their official twitter account",
                "produces": [
                    "application/json"
                ],
                "summary": "Get Alerts from various MARTA sources",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controllers.AlertResponse"
                        }
                    }
                }
            }
        },
        "/live/schedule/line/{line}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Given a line, return the current live schedule",
                "produces": [
                    "application/json"
                ],
                "summary": "Get Schedule By Line",
                "parameters": [
                    {
                        "type": "string",
                        "description": "RED, GOLD, BLUE, GREEN",
                        "name": "line",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controllers.Response"
                        }
                    }
                }
            }
        },
        "/live/schedule/station/{station}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Given a station, return the current live schedule",
                "produces": [
                    "application/json"
                ],
                "summary": "Get Schedule By Station",
                "parameters": [
                    {
                        "type": "string",
                        "description": "TODO: Enter all stations as enum?",
                        "name": "station",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controllers.Response"
                        }
                    }
                }
            }
        },
        "/smart/parking": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get available parking information as informed by twitter",
                "produces": [
                    "application/json"
                ],
                "summary": "Get Parking Information",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controllers.ParkingResponse"
                        }
                    }
                }
            }
        },
        "/smart/station/{id}": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Given a station ID, return the latest estimates for trains",
                "produces": [
                    "application/json"
                ],
                "summary": "Get Schedule By Station",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Unique id of the station",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controllers.Response"
                        }
                    }
                }
            }
        },
        "/static/directions": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get all available directions",
                "produces": [
                    "application/json"
                ],
                "summary": "Get Directions",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controllers.DirectionsResponse"
                        }
                    }
                }
            }
        },
        "/static/lines": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get all available lines",
                "produces": [
                    "application/json"
                ],
                "summary": "Get Lines",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controllers.LinesResponse"
                        }
                    }
                }
            }
        },
        "/static/schedule/station": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get MARTA's scheduled times for arrival for all stations",
                "produces": [
                    "application/json"
                ],
                "summary": "Get Static Schedule By Station",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controllers.Response"
                        }
                    }
                }
            }
        },
        "/static/stations": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get all available stations",
                "produces": [
                    "application/json"
                ],
                "summary": "Get Stations",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controllers.StationsResponse"
                        }
                    }
                }
            }
        },
        "/static/stations/location": {
            "get": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Get a list of MARTA rail station sorted in descending order of distance from a given point. Specify the longitude and latitude as decimal numbers of degrees, such as \"-45.354322\" or \"86.912341\"",
                "produces": [
                    "application/json"
                ],
                "summary": "Find the nearest rail stations",
                "parameters": [
                    {
                        "type": "number",
                        "description": "Latitude",
                        "name": "latitude",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "number",
                        "description": "Longitude",
                        "name": "longitude",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controllers.StationsLocationResponse"
                        }
                    },
                    "400": {
                        "description": ""
                    }
                }
            }
        }
    },
    "definitions": {
        "controllers.AlertResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/marta_schemas.Alerts"
                }
            }
        },
        "controllers.DirectionsResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/controllers.directionsData"
                }
            }
        },
        "controllers.LinesResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/controllers.linesData"
                }
            }
        },
        "controllers.ParkingResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/controllers.parkingData"
                    }
                }
            }
        },
        "controllers.Response": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/controllers.responseData"
                    }
                }
            }
        },
        "controllers.StationsLocationResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Station"
                    }
                }
            }
        },
        "controllers.StationsResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "$ref": "#/definitions/controllers.stationsData"
                }
            }
        },
        "controllers.directionsData": {
            "type": "object",
            "properties": {
                "directions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Direction"
                    }
                }
            }
        },
        "controllers.linesData": {
            "type": "object",
            "properties": {
                "lines": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Line"
                    }
                }
            }
        },
        "controllers.parkingData": {
            "type": "object",
            "properties": {
                "station": {
                    "$ref": "#/definitions/marta_schemas.Station"
                },
                "status": {
                    "type": "string"
                }
            }
        },
        "controllers.responseData": {
            "type": "object",
            "properties": {
                "schedule": {
                    "$ref": "#/definitions/marta_schemas.Schedule"
                },
                "station": {
                    "$ref": "#/definitions/marta_schemas.Station"
                }
            }
        },
        "controllers.stationsData": {
            "type": "object",
            "properties": {
                "stations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Station"
                    }
                }
            }
        },
        "marta_schemas.Alerts": {
            "type": "object",
            "properties": {
                "Bus": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/marta_schemas.BusAlert"
                    }
                },
                "Rail": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/marta_schemas.RailAlert"
                    }
                },
                "text": {
                    "type": "string"
                }
            }
        },
        "marta_schemas.BusAlert": {
            "type": "object",
            "properties": {
                "desc": {
                    "type": "string"
                },
                "expires": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "text": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "marta_schemas.RailAlert": {
            "type": "object",
            "properties": {
                "desc": {
                    "type": "string"
                },
                "expires": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "text": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "marta_schemas.Schedule": {
            "type": "object",
            "properties": {
                "destination": {
                    "type": "string"
                },
                "event_time": {
                    "type": "string"
                },
                "next_arrival": {
                    "type": "string"
                },
                "next_station": {
                    "type": "string"
                },
                "train_id": {
                    "type": "string"
                },
                "waiting_seconds": {
                    "type": "string"
                },
                "waiting_time": {
                    "type": "string"
                }
            }
        },
        "marta_schemas.Station": {
            "type": "object",
            "properties": {
                "direction": {
                    "type": "string"
                },
                "line": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "models.Alias": {
            "type": "object",
            "properties": {
                "alias": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "namedElementType": {
                    "type": "string"
                }
            }
        },
        "models.Direction": {
            "type": "object",
            "properties": {
                "aliases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Alias"
                    }
                },
                "feedback": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Feedback"
                    }
                },
                "lines": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Line"
                    }
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "models.Feedback": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "directionID": {
                    "type": "integer"
                },
                "expiresAt": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "lineID": {
                    "type": "integer"
                },
                "source": {
                    "$ref": "#/definitions/models.FeedbackSource"
                },
                "sourceID": {
                    "type": "integer"
                },
                "stationID": {
                    "type": "integer"
                },
                "thumbsDown": {
                    "type": "integer"
                },
                "thumbsUp": {
                    "type": "integer"
                },
                "type": {
                    "$ref": "#/definitions/models.FeedbackType"
                },
                "typeID": {
                    "type": "integer"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "models.FeedbackSource": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "sourceID": {
                    "type": "string"
                },
                "sourceType": {
                    "type": "string"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "models.FeedbackType": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "updatedAt": {
                    "type": "string"
                }
            }
        },
        "models.Line": {
            "type": "object",
            "properties": {
                "aliases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Alias"
                    }
                },
                "directions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Direction"
                    }
                },
                "feedback": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Feedback"
                    }
                },
                "name": {
                    "type": "string"
                },
                "stations": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Station"
                    }
                }
            }
        },
        "models.Station": {
            "type": "object",
            "properties": {
                "aliases": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Alias"
                    }
                },
                "detail": {
                    "$ref": "#/definitions/models.StationDetail"
                },
                "feedback": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Feedback"
                    }
                },
                "id": {
                    "type": "integer"
                },
                "lines": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Line"
                    }
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "models.StationDetail": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "distance": {
                    "type": "number"
                },
                "location": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header",
            "authorizationUrl": ""
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1.0",
	Host:        "",
	BasePath:    "",
	Schemes:     []string{},
	Title:       "SMARTA API",
	Description: "API to serve you SMARTA data",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
