// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package gomarta

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson2189435aDecodeGithubComSmartatransitGomarta(in *jlexer.Lexer, out *TrainAPIResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(TrainAPIResponse, 0, 1)
			} else {
				*out = TrainAPIResponse{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 Train
			(v1).UnmarshalEasyJSON(in)
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2189435aEncodeGithubComSmartatransitGomarta(out *jwriter.Writer, in TrainAPIResponse) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			(v3).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v TrainAPIResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2189435aEncodeGithubComSmartatransitGomarta(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v TrainAPIResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2189435aEncodeGithubComSmartatransitGomarta(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *TrainAPIResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2189435aDecodeGithubComSmartatransitGomarta(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *TrainAPIResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2189435aDecodeGithubComSmartatransitGomarta(l, v)
}
func easyjson2189435aDecodeGithubComSmartatransitGomarta1(in *jlexer.Lexer, out *Train) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "DESTINATION":
			out.Destination = string(in.String())
		case "DIRECTION":
			out.Direction = Direction(in.String())
		case "EVENT_TIME":
			out.EventTime = string(in.String())
		case "LINE":
			out.Line = RailLine(in.String())
		case "NEXT_ARR":
			out.NextArrival = string(in.String())
		case "STATION":
			out.Station = string(in.String())
		case "TRAIN_ID":
			out.TrainID = string(in.String())
		case "WAITING_SECONDS":
			out.WaitingSeconds = string(in.String())
		case "WAITING_TIME":
			out.WaitingTime = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2189435aEncodeGithubComSmartatransitGomarta1(out *jwriter.Writer, in Train) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"DESTINATION\":"
		out.RawString(prefix[1:])
		out.String(string(in.Destination))
	}
	{
		const prefix string = ",\"DIRECTION\":"
		out.RawString(prefix)
		out.String(string(in.Direction))
	}
	{
		const prefix string = ",\"EVENT_TIME\":"
		out.RawString(prefix)
		out.String(string(in.EventTime))
	}
	{
		const prefix string = ",\"LINE\":"
		out.RawString(prefix)
		out.String(string(in.Line))
	}
	{
		const prefix string = ",\"NEXT_ARR\":"
		out.RawString(prefix)
		out.String(string(in.NextArrival))
	}
	{
		const prefix string = ",\"STATION\":"
		out.RawString(prefix)
		out.String(string(in.Station))
	}
	{
		const prefix string = ",\"TRAIN_ID\":"
		out.RawString(prefix)
		out.String(string(in.TrainID))
	}
	{
		const prefix string = ",\"WAITING_SECONDS\":"
		out.RawString(prefix)
		out.String(string(in.WaitingSeconds))
	}
	{
		const prefix string = ",\"WAITING_TIME\":"
		out.RawString(prefix)
		out.String(string(in.WaitingTime))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Train) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2189435aEncodeGithubComSmartatransitGomarta1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Train) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2189435aEncodeGithubComSmartatransitGomarta1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Train) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2189435aDecodeGithubComSmartatransitGomarta1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Train) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2189435aDecodeGithubComSmartatransitGomarta1(l, v)
}
func easyjson2189435aDecodeGithubComSmartatransitGomarta2(in *jlexer.Lexer, out *BusAPIResponse) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(BusAPIResponse, 0, 1)
			} else {
				*out = BusAPIResponse{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v4 Bus
			(v4).UnmarshalEasyJSON(in)
			*out = append(*out, v4)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2189435aEncodeGithubComSmartatransitGomarta2(out *jwriter.Writer, in BusAPIResponse) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v5, v6 := range in {
			if v5 > 0 {
				out.RawByte(',')
			}
			(v6).MarshalEasyJSON(out)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v BusAPIResponse) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2189435aEncodeGithubComSmartatransitGomarta2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v BusAPIResponse) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2189435aEncodeGithubComSmartatransitGomarta2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *BusAPIResponse) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2189435aDecodeGithubComSmartatransitGomarta2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *BusAPIResponse) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2189435aDecodeGithubComSmartatransitGomarta2(l, v)
}
func easyjson2189435aDecodeGithubComSmartatransitGomarta3(in *jlexer.Lexer, out *Bus) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeString()
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ADHERENCE":
			out.Adherence = string(in.String())
		case "BLOCKID":
			out.BlockID = string(in.String())
		case "BLOCK_ABBR":
			out.BlockAbbreviation = string(in.String())
		case "DIRECTION":
			out.Direction = string(in.String())
		case "LATITUDE":
			out.Latitude = string(in.String())
		case "LONGITUDE":
			out.Longitude = string(in.String())
		case "MSGTIME":
			out.MessageTime = string(in.String())
		case "ROUTE":
			out.Route = string(in.String())
		case "STOPID":
			out.StopID = string(in.String())
		case "TIMEPOINT":
			out.TimePoint = string(in.String())
		case "TRIPID":
			out.TripID = string(in.String())
		case "VEHICLE":
			out.Vehicle = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson2189435aEncodeGithubComSmartatransitGomarta3(out *jwriter.Writer, in Bus) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ADHERENCE\":"
		out.RawString(prefix[1:])
		out.String(string(in.Adherence))
	}
	{
		const prefix string = ",\"BLOCKID\":"
		out.RawString(prefix)
		out.String(string(in.BlockID))
	}
	{
		const prefix string = ",\"BLOCK_ABBR\":"
		out.RawString(prefix)
		out.String(string(in.BlockAbbreviation))
	}
	{
		const prefix string = ",\"DIRECTION\":"
		out.RawString(prefix)
		out.String(string(in.Direction))
	}
	{
		const prefix string = ",\"LATITUDE\":"
		out.RawString(prefix)
		out.String(string(in.Latitude))
	}
	{
		const prefix string = ",\"LONGITUDE\":"
		out.RawString(prefix)
		out.String(string(in.Longitude))
	}
	{
		const prefix string = ",\"MSGTIME\":"
		out.RawString(prefix)
		out.String(string(in.MessageTime))
	}
	{
		const prefix string = ",\"ROUTE\":"
		out.RawString(prefix)
		out.String(string(in.Route))
	}
	{
		const prefix string = ",\"STOPID\":"
		out.RawString(prefix)
		out.String(string(in.StopID))
	}
	{
		const prefix string = ",\"TIMEPOINT\":"
		out.RawString(prefix)
		out.String(string(in.TimePoint))
	}
	{
		const prefix string = ",\"TRIPID\":"
		out.RawString(prefix)
		out.String(string(in.TripID))
	}
	{
		const prefix string = ",\"VEHICLE\":"
		out.RawString(prefix)
		out.String(string(in.Vehicle))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Bus) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson2189435aEncodeGithubComSmartatransitGomarta3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Bus) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson2189435aEncodeGithubComSmartatransitGomarta3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Bus) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson2189435aDecodeGithubComSmartatransitGomarta3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Bus) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson2189435aDecodeGithubComSmartatransitGomarta3(l, v)
}
